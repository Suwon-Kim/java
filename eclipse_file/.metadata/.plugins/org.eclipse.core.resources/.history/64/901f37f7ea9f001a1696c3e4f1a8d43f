package kr.ac.green;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

public class SimplePad extends JFrame {
	
	private JMenuBar mBar;
	private JMenu mFile;
	private JMenuItem miOpen;
	private JMenuItem miSave;
	private JMenuItem miExit;
	
	private JTextArea taEditor;
	
	private JFileChooser chooser;
	
	public SimplePad() {
		init();
		setDisplay();
		addListeners();
		showFrame();
	}
	
	private void init() {
		mBar = new JMenuBar();
		mFile = new JMenu("File");
		miOpen = new JMenuItem("Open");
		miSave = new JMenuItem("Save");
		miExit = new JMenuItem("Exit");
		
		mFile.add(miOpen);
		mFile.add(miSave);
		mFile.addSeparator();
		mFile.add(miExit);
		
		mBar.add(mFile);
		
		taEditor = new JTextArea();
		taEditor.setTabSize(4);
		
		chooser = new JFileChooser(".");
	}

	private void setDisplay() {
		setJMenuBar(mBar);
		add(new JScrollPane(taEditor), BorderLayout.CENTER);
	}

	private void addListeners() {
		ActionListener listener = (e) -> {
			Object o = e.getSource();
			if(o == miOpen) {
				open();
			} else if(o == miSave) {
				save();
			} else {
				System.exit(0);
			}
		};
		miOpen.addActionListener(listener);
		miSave.addActionListener(listener);
		miExit.addActionListener(listener);
		
		Document doc = taEditor.getDocument();
		doc.addDocumentListener(new DocumentListener() {
			
			//내용을 감지하는거
			@Override
			public void removeUpdate(DocumentEvent e) {
				System.out.println("remove");	
			}
			//내용을 감지하는거
			@Override
			public void insertUpdate(DocumentEvent e) {
				System.out.println("insert");
			}
			
			//폰트나 글꼴이 바뀌는거
			@Override
			public void changedUpdate(DocumentEvent e) {
				
			}
		});
	}
	
	private void open() {
		int result = chooser.showOpenDialog(this);
		if(result == JFileChooser.APPROVE_OPTION) {
			File file = chooser.getSelectedFile();
			
			FileReader fr = null;
			BufferedReader br = null;
			
			try {
				fr = new FileReader(file);
				br = new BufferedReader(fr);
				
				String line = null;
				StringBuilder builder = new StringBuilder();
				while( (line = br.readLine()) != null) {
					builder.append(line + "\n");
				}
				taEditor.setText(builder.toString());
			} catch (IOException e) {
				JOptionPane.showMessageDialog(this, "불러오는 중 에러발생");
			} finally {
				MyUtils.closeAll(br, fr);
			}
		}
	}
	private void save() {
		int result = chooser.showSaveDialog(this);
		if(result == JFileChooser.APPROVE_OPTION) {
			File file = chooser.getSelectedFile();
			
			FileWriter fw = null;
			try {
				fw = new FileWriter(file);
				fw.write(taEditor.getText());
				fw.flush();
			} catch (IOException e) {
				JOptionPane.showConfirmDialog(this, "저장 중 에러 발생");
			} finally {
				MyUtils.closeAll(fw);
			}
			
		}
	}
	
	private void showFrame() {
		setTitle("SimplePad ver0.9");
		setSize(500, 600);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setVisible(true);		
	}

	public static void main(String[] args) {
		new SimplePad();
	}
}





