import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Vector;

/*
 * ObjectInputStream, ObjectOutputStream
 * --> 필터 (읽고 쓰는 대상을 선정할 수 없다)
 * 
 */
public class IOEx1 {
	public static void save() {
		FileOutputStream fos = null;
		ObjectOutputStream oos = null;
		
		try {
			//파일 쓰는놈 
			fos = new FileOutputStream("data.dat");
			oos = new ObjectOutputStream(fos); 
			//fos를 marshalling 하기 위한 ObjectOutputStream 객체를 생성
			//마샬링은 데이터를 바이트의 덩어리로 만들어 스트림에 보낼 수 있는 형태로 바꾸는
			//변환 작업을 뜻한다.
			//한 파일당 한개의 객체만 쓰자
			//벡터는 직렬화를 지원한다
			Vector<MyObj> vec = new Vector<MyObj>();
			vec.add(new MyObj());
			vec.add(new MyObj());
			vec.add(new MyObj());
			vec.add(new MyObj());
			oos.writeObject(vec); // 멤버변수에 직렬화 검사
			
			oos.flush();
			oos.reset();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			MyUtils.closeAll(oos, fos);
		}
	}
	public static void load() {
		FileInputStream fis = null;
		ObjectInputStream ois = null;
		
		try {
			//파일 읽는놈
			fis = new FileInputStream("data.dat");
			ois = new ObjectInputStream(fis);
			
			Object o = ois.readObject();  //객체에서 Object를 읽는다
			Vector<?> vec = (Vector<?>)o;
			System.out.println(o);
		} catch (FileNotFoundException e) {
			
		} catch (ClassNotFoundException e) {
			//객체는 상태와 행위(멤버변수와 메소드)로 이루어짐 
			//readObject(복원)하기 위해서는 file과 객체를 찍어낸 클래스가 있어야
			//복원 할 수 있다.
			//final만 쓸때는 객체마다 다른값을 가지면 final을 쓴다.
			//static final을 쓸때는 객체마다 다 같은값을 가질때 사용함
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			MyUtils.closeAll(ois, fis);
		}
	}
	public static void main(String[] args) {
		save();
		load();
	}
}